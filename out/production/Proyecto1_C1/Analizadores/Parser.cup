package Analizadores;
import java_cup.runtime.*;
import java.util.ArrayList;
//java -jar C:\Users\carlo\OneDrive\Escritorio\Semestre\Compi1\librerias2\java-cup-11b.jar Parser.cup
//java -jar C:\Users\carlo\OneDrive\Escritorio\Semestre\Compi1\librerias2\jflex-full-1.7.0.jar Lex.jflex
parser code
{://Codigo visible
    public ArrayList<Automata> arboles = new ArrayList<>();
    public void syntax_error(Symbol s){
        System.out.println("Error sintactico: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

:}


terminal String RCONJ, DOS_PUNTOS, FLECHA, COMA, PALITO, LLAVE_ABRE, LLAVE_CIERRA, PUNTO, OR,
ASTERISCO, SUMA, PREGUNTA, PORCENTAJE, PUNTO_COMA, IDENTIFICADOR,
NOMBRE, NOMBRE_M, ENTERO, ASCII, CARACTER, CADENA;

non terminal Codigo;
non terminal primera, segunda, instruccion, notacion, conjunto, singular, expresion, evaluacion;

start with Codigo;

Codigo::= LLAVE_ABRE primera PORCENTAJE PORCENTAJE PORCENTAJE PORCENTAJE segunda LLAVE_CIERRA;

primera::= primera instruccion|
                        instruccion;

instruccion ::= RCONJ DOS_PUNTOS IDENTIFICADOR FLECHA notacion PUNTO_COMA|
                        IDENTIFICADOR FLECHA expresion:a PUNTO_COMA{:arboles.add(new Automata((Nodo_binario) a));:};

notacion ::= NOMBRE_M PALITO NOMBRE_M|
             NOMBRE PALITO NOMBRE|
             ENTERO PALITO ENTERO|
             ASCII PALITO ASCII|
             conjunto;

conjunto::= conjunto COMA singular|
                    singular;

singular::= NOMBRE_M|
            NOMBRE|
            ENTERO|
            ASCII;

expresion ::= PUNTO:a expresion:b expresion:c {:
                      Nodo_binario padre = new Nodo_binario(a);
                      padre.setHijo_izquierdo((Nodo_binario) b);
                      padre.setHijo_derecho((Nodo_binario) c);
                      RESULT = padre;
                      :}|
                      OR:a expresion:b expresion:c {:
                      Nodo_binario padre = new Nodo_binario(a);
                      padre.setHijo_izquierdo((Nodo_binario) b);
                      padre.setHijo_derecho((Nodo_binario) c);
                      RESULT = padre;
                      :}|
                      ASTERISCO:a expresion:b {:
                      Nodo_binario padre = new Nodo_binario(a);
                      padre.setHijo_izquierdo((Nodo_binario) b);
                      RESULT = padre;
                      :}|
                      SUMA:a expresion:b {:
                      Nodo_binario padre = new Nodo_binario(a);
                      padre.setHijo_izquierdo((Nodo_binario) b);
                      RESULT = padre;
                      :}|
                      PREGUNTA:a expresion:b {:
                      Nodo_binario padre = new Nodo_binario(a);
                      padre.setHijo_izquierdo((Nodo_binario) b);
                      RESULT = padre;
                      :}|
                      CARACTER:a {:
                            Nodo_binario hoja = new Nodo_binario(a);
                            hoja.setHoja(true);
                            hoja.setAnulable(false);
                            RESULT = hoja;
                      :}|
                      LLAVE_ABRE IDENTIFICADOR:a LLAVE_CIERRA{:
                        Nodo_binario hoja = new Nodo_binario(a);
                        hoja.setHoja(true);
                        hoja.setAnulable(false);
                        RESULT = hoja;
                        :};

segunda::= segunda evaluacion|
                        evaluacion;

evaluacion::= IDENTIFICADOR DOS_PUNTOS CADENA PUNTO_COMA;
